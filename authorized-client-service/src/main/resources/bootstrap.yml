#  MICROSERVICE CONFIGURATION
#
#  Our microservices, that want’s to access its configuration can reach the config server in two ways:
#
#  1. Bind directly to the config server using the configuration property spring.cloud.config.uri
#  2. Lookup a config server using the discovery server, Eureka. This can be done by specifying the properties:
#       spring.cloud.config.discovery.enabled: true (defaults to false)
#       spring.cloud.config.discovery.serviceId: config-server, i.e. the name of the config server as specified in the config server’s bootstrap.yml - file in the property spring.application.name.
#  Each MICROSERVICE stores this connection configuration in its local bootstrap.yml-file.

#       ???? - MICROSERVICE can’t store information on how to connect to the config server in the config servers repository, right?

#  Option no. 2 might seem better due to the looser coupling, e.g. you can move the config-server or have multiple config servers started to avoid a single point of failure.
#  Option no. 1 however works fine as well given that you deploy your microservices in a container orchestrator,
#   e.g. Docker in Swarm mode or Kubernetes, since they will provide a logical service name that the clients can use
#   and the container orchestrator will forward the request to one of the running config server.

#info:
#  component: Authorized Client Service

#eureka:
#  instance:
#    leaseRenewalIntervalInSeconds: 1
#    leaseExpirationDurationInSeconds: 2
#  client:
#    serviceUrl:
#      defaultZone: http://127.0.0.1:8761/eureka/
#    healthcheck:
#      enabled: true
#    lease:
#      duration: 5

#spring:
#  application:
#    name: authorized-client-service
#  cloud:
#    config:
#      failFast: true
#      retry:
#        initialInterval: 3000
#        multiplier: 1.3
#        maxInterval: 5000
#        maxAttempts: 20
#      discovery:
#        serviceId: config-server
#        enabled: true


spring:
  application:
    name: authorized-client-service
  cloud:
    config:
      uri: http://localhost:8888
      fail-fast: true